//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { WeeklyAndDailyPlannerEntity } from './db/WeeklyAndDailyPlanner.entity';
import { NotesEntity } from './db/Notes.entity';
import { ReminderEntity } from './db/Reminder.entity';
import { ToDoListEntity } from './db/ToDoList.entity';
import { ScheduleEntity } from './db/Schedule.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      WeeklyAndDailyPlannerEntity,
      NotesEntity,
      ReminderEntity,
      ToDoListEntity,
      ScheduleEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      WeeklyAndDailyPlanner: [
        { Days: 'Days 1', id: 65 },
        { Days: 'Days 2', id: 14 },
        { Days: 'Days 3', id: 31 },
        { Days: 'Days 4', id: 80 },
        { Days: 'Days 5', id: 64 },
      ],
      Notes: [
        { Content: 'Content 1', id: 43 },
        { Content: 'Content 2', id: 75 },
        { Content: 'Content 3', id: 18 },
        { Content: 'Content 4', id: 80 },
        { Content: 'Content 5', id: 70 },
      ],
      Reminder: [
        {
          ReminderType: 'ReminderType 1',
          ReminderTime: '2024-10-24T04:35:46.018Z',
          DescriptionOrQuantity: 'DescriptionOrQuantity 1',
          id: 59,
        },
        {
          ReminderType: 'ReminderType 2',
          ReminderTime: '2024-08-12T08:11:03.256Z',
          DescriptionOrQuantity: 'DescriptionOrQuantity 2',
          id: 4,
        },
        {
          ReminderType: 'ReminderType 3',
          ReminderTime: '2024-03-06T03:31:20.531Z',
          DescriptionOrQuantity: 'DescriptionOrQuantity 3',
          id: 64,
        },
        {
          ReminderType: 'ReminderType 4',
          ReminderTime: '2024-10-27T02:47:16.211Z',
          DescriptionOrQuantity: 'DescriptionOrQuantity 4',
          id: 54,
        },
        {
          ReminderType: 'ReminderType 5',
          ReminderTime: '2024-01-04T09:49:27.258Z',
          DescriptionOrQuantity: 'DescriptionOrQuantity 5',
          id: 97,
        },
      ],
      ToDoList: [
        { Task: 'Task 1', id: 60 },
        { Task: 'Task 2', id: 22 },
        { Task: 'Task 3', id: 67 },
        { Task: 'Task 4', id: 62 },
        { Task: 'Task 5', id: 54 },
      ],
      Schedule: [
        {
          Date: '2024-06-24T17:56:26.116Z',
          StartTime: '2023-07-13T15:49:21.832Z',
          EndTime: '2024-07-04T22:17:26.515Z',
          Description: 'Description 1',
          id: 81,
        },
        {
          Date: '2024-06-22T18:58:06.550Z',
          StartTime: '2024-05-31T10:04:09.042Z',
          EndTime: '2025-04-07T12:05:21.139Z',
          Description: 'Description 2',
          id: 15,
        },
        {
          Date: '2024-10-07T13:08:47.950Z',
          StartTime: '2024-10-02T21:25:43.174Z',
          EndTime: '2024-12-13T20:00:28.080Z',
          Description: 'Description 3',
          id: 34,
        },
        {
          Date: '2024-05-13T11:49:13.107Z',
          StartTime: '2023-10-04T16:05:24.983Z',
          EndTime: '2025-01-16T00:22:04.774Z',
          Description: 'Description 4',
          id: 34,
        },
        {
          Date: '2024-03-03T14:31:34.198Z',
          StartTime: '2024-10-11T06:55:15.568Z',
          EndTime: '2023-10-23T13:10:20.147Z',
          Description: 'Description 5',
          id: 94,
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource(
        'WeeklyAndDailyPlannerEntity',
        data.WeeklyAndDailyPlanner,
      );
      await this.SeedResource('NotesEntity', data.Notes);
      await this.SeedResource('ReminderEntity', data.Reminder);
      await this.SeedResource('ToDoListEntity', data.ToDoList);
      await this.SeedResource('ScheduleEntity', data.Schedule);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
